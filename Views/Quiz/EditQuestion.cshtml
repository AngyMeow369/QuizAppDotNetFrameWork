@model QuizAppDotNetFrameWork.Models.Question
@{
    ViewBag.Title = "Edit Question";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card bg-gradient bg-dark border-secondary">
                <div class="card-body py-4">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h1 class="card-title h2 mb-2 text-white">
                                <i class="bi bi-pencil-square me-2"></i>Edit Question
                            </h1>
                            <p class="card-text mb-0 text-light opacity-75">
                                Update question details and options for: <strong>@ViewBag.Quiz?.Title</strong>
                            </p>
                        </div>
                        <div class="col-md-4 text-md-end">
                            <a href="@Url.Action("ManageQuestions", "Quiz", new { quizId = Model.QuizId })" class="btn btn-outline-light btn-sm">
                                <i class="bi bi-arrow-left me-1"></i>Back to Questions
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card shadow-sm border-secondary bg-dark text-light">
                <div class="card-header bg-dark border-secondary">
                    <h5 class="card-title mb-0 text-light">
                        <i class="bi bi-question-circle me-2"></i>Question Details
                    </h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("EditQuestion", "Quiz", FormMethod.Post, new { @class = "needs-validation", novalidate = "true" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.QuestionId)
                        @Html.HiddenFor(m => m.QuizId)

                        <!-- Question Text -->
                        <div class="mb-4">
                            <label for="QuestionText" class="form-label">Question Text *</label>
                            @Html.TextAreaFor(m => m.QuestionText, new { @class = "form-control", rows = "3", required = "required", placeholder = "Enter the question text..." })
                            <div class="invalid-feedback">Please enter a question.</div>
                        </div>

                        <!-- Options Section -->
                        <div class="mb-4">
                            <label class="form-label">Options *</label>
                            <small class="text-muted d-block mb-2">Mark the correct answer using the dropdown.</small>

                            <div id="optionsContainer">
                                @if (Model.Options != null && Model.Options.Any())
                                {
                                    for (int i = 0; i < Model.Options.Count; i++)
                                    {
                                        <div class="option-item card border-secondary bg-dark mb-3">
                                            <div class="card-body">
                                                <div class="row align-items-center">
                                                    <div class="col-9">
                                                        <input type="hidden" name="Options[@i].OptionId" value="@Model.Options[i].OptionId" />
                                                        <input type="hidden" name="Options[@i].QuestionId" value="@Model.QuestionId" />
                                                        <input type="text" class="form-control option-text"
                                                               name="Options[@i].OptionText"
                                                               value="@Model.Options[i].OptionText"
                                                               placeholder="Enter option text..."
                                                               required>
                                                    </div>
                                                    <div class="col-2">
                                                        <select name="Options[@i].IsCorrect" class="form-select">
                                                            <option value="false" @(!Model.Options[i].IsCorrect ? "selected" : "")>Incorrect</option>
                                                            <option value="true" @(Model.Options[i].IsCorrect ? "selected" : "")>Correct</option>
                                                        </select>
                                                    </div>
                                                    <div class="col-1">
                                                        <button type="button" class="btn btn-outline-danger btn-sm remove-option" @(Model.Options.Count <= 2 ? "disabled" : "")>
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <!-- Default options if none exist -->
                                    for (int i = 0; i < 4; i++)
                                    {
                                        <div class="option-item card border-secondary bg-dark mb-3">
                                            <div class="card-body">
                                                <div class="row align-items-center">
                                                    <div class="col-9">
                                                        <input type="hidden" name="Options[@i].OptionId" value="0" />
                                                        <input type="hidden" name="Options[@i].QuestionId" value="@Model.QuestionId" />
                                                        <input type="text" class="form-control option-text"
                                                               name="Options[@i].OptionText"
                                                               value=""
                                                               placeholder="Enter option text..."
                                                               required>
                                                    </div>
                                                    <div class="col-2">
                                                        <select name="Options[@i].IsCorrect" class="form-select">
                                                            <option value="false" @(i > 0 ? "selected" : "")>Incorrect</option>
                                                            <option value="true" @(i == 0 ? "selected" : "")>Correct</option>
                                                        </select>
                                                    </div>
                                                    <div class="col-1">
                                                        <button type="button" class="btn btn-outline-danger btn-sm remove-option" @(i < 2 ? "disabled" : "")>
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>

                            <!-- Add Option Button -->
                            <button type="button" id="addOption" class="btn btn-outline-success btn-sm">
                                <i class="bi bi-plus-circle me-1"></i>Add Another Option
                            </button>
                            <div class="invalid-feedback" id="optionsError" style="display: none;">At least 2 options are required.</div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-check-circle me-1"></i>Update Question
                            </button>
                            <a href="@Url.Action("ManageQuestions", "Quiz", new { quizId = Model.QuizId })" class="btn btn-outline-secondary">
                                <i class="bi bi-x-circle me-1"></i>Cancel
                            </a>
                            <button type="button" id="deleteQuestion" class="btn btn-outline-danger ms-auto">
                                <i class="bi bi-trash me-1"></i>Delete Question
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar Help -->
        <div class="col-md-4">
            <div class="card shadow-sm border-secondary bg-dark text-light">
                <div class="card-header bg-dark border-secondary">
                    <h5 class="card-title mb-0 text-light">
                        <i class="bi bi-info-circle me-2"></i>Editing Tips
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6 class="text-primary">Question Text</h6>
                        <small class="text-muted">Make sure the question is clear and unambiguous.</small>
                    </div>
                    <div class="mb-3">
                        <h6 class="text-success">Options</h6>
                        <small class="text-muted">
                            <i class="bi bi-check-circle-fill text-success me-1"></i>Select the correct answer<br>
                            <i class="bi bi-dash-circle text-muted me-1"></i>Provide plausible distractors<br>
                            <i class="bi bi-2-circle text-warning me-1"></i>Minimum 2 options required
                        </small>
                    </div>
                    <div class="mb-3">
                        <h6 class="text-warning">Best Practices</h6>
                        <small class="text-muted">
                            • Keep options similar in length<br>
                            • Avoid "all of the above"<br>
                            • Make distractors plausible<br>
                            • One clearly correct answer
                        </small>
                    </div>
                </div>
            </div>

            <!-- Quiz Info -->
            <div class="card shadow-sm border-secondary bg-dark text-light mt-3">
                <div class="card-header bg-dark border-secondary">
                    <h5 class="card-title mb-0 text-light">
                        <i class="bi bi-file-text me-2"></i>Quiz Information
                    </h5>
                </div>
                <div class="card-body">
                    <h6>@ViewBag.Quiz?.Title</h6>
                    <small class="text-muted">
                        @ViewBag.Quiz?.Description<br>
                        <br>
                        <strong>Questions:</strong> @ViewBag.QuestionCount<br>
                        <strong>Created:</strong> @ViewBag.Quiz?.CreatedOn.ToString("MMM dd, yyyy")
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let optionCount = @(Model.Options?.Count ?? 4);

            // Add new option
            document.getElementById('addOption').addEventListener('click', function () {
                const optionsContainer = document.getElementById('optionsContainer');
                const newOptionHtml = `
                    <div class="option-item card border-secondary bg-dark mb-3">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-1">
                                    <div class="form-check">
                                        <input class="form-check-input correct-option" type="radio" 
                                               name="SelectedCorrectOption" 
                                               value="${optionCount}" 
                                               required>
                                    </div>
                                </div>
                                <div class="col-9">
                                    <input type="hidden" name="Options[${optionCount}].OptionId" value="0" />
                                    <input type="hidden" name="Options[${optionCount}].QuestionId" value="@Model.QuestionId" />
                                    <input type="text" class="form-control option-text" 
                                           name="Options[${optionCount}].OptionText" 
                                           value="" 
                                           placeholder="Enter option text..." 
                                           required>
                                </div>
                                <div class="col-2">
                                    <button type="button" class="btn btn-outline-danger btn-sm remove-option">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                optionsContainer.insertAdjacentHTML('beforeend', newOptionHtml);
                optionCount++;
                updateRemoveButtons();
            });

            // Remove option
            document.addEventListener('click', function (e) {
                if (e.target.closest('.remove-option')) {
                    const optionItem = e.target.closest('.option-item');
                    const optionItems = document.querySelectorAll('.option-item');
                    
                    if (optionItems.length > 2) {
                        optionItem.remove();
                        reindexOptions();
                        updateRemoveButtons();
                    }
                }
            });

            // Form validation
            const form = document.querySelector('.needs-validation');
            const optionsError = document.getElementById('optionsError');

            form.addEventListener('submit', function (event) {
                const optionItems = document.querySelectorAll('.option-item');
                const filledOptions = Array.from(document.querySelectorAll('.option-text'))
                    .filter(input => input.value.trim() !== '');

                if (filledOptions.length < 2) {
                    optionsError.style.display = 'block';
                    event.preventDefault();
                    event.stopPropagation();
                } else {
                    optionsError.style.display = 'none';
                }

                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }

                form.classList.add('was-validated');
            });

            // Delete question confirmation
            document.getElementById('deleteQuestion').addEventListener('click', function () {
                if (confirm('Are you sure you want to delete this question? This action cannot be undone.')) {
                    window.location.href = '@Url.Action("DeleteQuestion", "Quiz", new { questionId = Model.QuestionId })';
                }
            });

            function reindexOptions() {
                const optionItems = document.querySelectorAll('.option-item');
                optionItems.forEach((item, index) => {
                    // Update radio button value
                    const radio = item.querySelector('.correct-option');
                    radio.value = index;
                    
                    // Update input names
                    const hiddenId = item.querySelector('input[type="hidden"]:nth-child(1)');
                    const hiddenQuestionId = item.querySelector('input[type="hidden"]:nth-child(2)');
                    const textInput = item.querySelector('.option-text');
                    
                    hiddenId.name = `Options[${index}].OptionId`;
                    hiddenQuestionId.name = `Options[${index}].QuestionId`;
                    textInput.name = `Options[${index}].OptionText`;
                });
                optionCount = optionItems.length;
            }

            function updateRemoveButtons() {
                const optionItems = document.querySelectorAll('.option-item');
                const removeButtons = document.querySelectorAll('.remove-option');
                
                removeButtons.forEach(btn => {
                    btn.disabled = optionItems.length <= 2;
                });
            }

            // Initialize
            updateRemoveButtons();
        });
    </script>
}

<style>
    .bg-gradient {
        background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%) !important;
    }

    .form-check-input:checked {
        background-color: #68d391;
        border-color: #68d391;
    }

    .option-item {
        transition: border-color 0.2s ease;
    }

    .option-item:hover {
        border-color: #63b3ed !important;
    }

    .correct-option:checked ~ .col-9 .form-control {
        border-color: #68d391 !important;
    }
</style>