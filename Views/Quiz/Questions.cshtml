@model List<QuizAppDotNetFrameWork.Models.Question>

@{
    ViewBag.Title = "Quiz Questions";
}

<div class="container mt-4">
    <!-- Quiz Header with Timer -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card bg-gradient bg-dark border-secondary">
                <div class="card-body py-4">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h1 class="card-title h2 mb-2 text-white">
                                <i class="bi bi-question-circle me-2"></i>@ViewBag.QuizTitle
                            </h1>
                            <p class="card-text mb-0 text-light opacity-75">
                                Answer all questions before submitting. Time remaining:
                                <strong id="timeRemaining">Calculating...</strong>
                            </p>
                        </div>
                        <div class="col-md-4 text-md-end">
                            <div class="bg-dark bg-opacity-50 border border-secondary rounded p-3 d-inline-block">
                                <small class="text-uppercase fw-bold text-light opacity-75">Progress</small>
                                <div class="h5 mb-0 text-warning" id="progressText">0/@Model.Count</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Quiz Navigation Sidebar -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm border-secondary bg-dark text-light">
                <div class="card-header bg-dark border-secondary">
                    <h5 class="card-title mb-0 text-light">
                        <i class="bi bi-list-ol me-2"></i>Questions
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush" id="questionNav">
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            <a href="#question-@(i + 1)"
                               class="list-group-item list-group-item-action bg-dark text-light question-nav-item"
                               data-question-index="@i">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>Question @(i + 1)</span>
                                    <span class="badge bg-secondary status-badge" id="status-@i">○</span>
                                </div>
                            </a>
                        }
                    </div>
                </div>
            </div>

            <!-- Quiz Stats -->
            <div class="card shadow-sm border-secondary bg-dark text-light mt-3">
                <div class="card-body text-center">
                    <h6 class="text-primary mb-3">Quiz Stats</h6>
                    <div class="row">
                        <div class="col-6 mb-2">
                            <div class="border border-secondary rounded p-2">
                                <small class="text-muted d-block">Total</small>
                                <strong class="text-white">@Model.Count</strong>
                            </div>
                        </div>
                        <div class="col-6 mb-2">
                            <div class="border border-secondary rounded p-2">
                                <small class="text-muted d-block">Answered</small>
                                <strong class="text-warning" id="answeredStat">0</strong>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="border border-secondary rounded p-2">
                                <small class="text-muted d-block">Remaining</small>
                                <strong class="text-info" id="remainingStat">@Model.Count</strong>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="border border-secondary rounded p-2">
                                <small class="text-muted d-block">Time</small>
                                <strong class="text-success" id="timeStat">--:--</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Questions Content -->
        <div class="col-md-9">
            <div class="card shadow-sm border-secondary bg-dark text-light">
                <div class="card-header bg-dark border-secondary d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0 text-light">
                        <i class="bi bi-pencil me-2"></i>Answer Questions
                    </h5>
                    <div class="d-flex align-items-center">
                        <div class="progress me-3" style="width: 120px; height: 8px;">
                            <div class="progress-bar bg-success" id="progressBar" style="width: 0%"></div>
                        </div>
                        <small class="text-muted" id="progressPercentage">0%</small>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model != null && Model.Count > 0)
                    {
                        using (Html.BeginForm("SubmitQuiz", "Quiz", FormMethod.Post, new { id = "quizForm" }))
                        {
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="quizId" value="@ViewBag.QuizId" />

                            <!-- Quick Actions -->
                            <div class="row mb-4">
                                <div class="col-12">
                                    <div class="d-flex gap-2 flex-wrap">
                                        <button type="button" class="btn btn-outline-primary btn-sm" id="markAllBtn">
                                            <i class="bi bi-check-all me-1"></i>Mark All for Review
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm" id="clearAllBtn">
                                            <i class="bi bi-arrow-clockwise me-1"></i>Clear All Answers
                                        </button>
                                        <div class="ms-auto">
                                            <button type="button" class="btn btn-outline-warning btn-sm" id="reviewModeBtn">
                                                <i class="bi bi-eye me-1"></i>Review Mode
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            for (int i = 0; i < Model.Count; i++)
                            {
                                var question = Model[i];
                                <div class="question-card mb-4 p-4 border-secondary rounded bg-dark" id="question-@(i + 1)">
                                    <div class="question-header d-flex justify-content-between align-items-start mb-3">
                                        <h5 class="question-text mb-0 text-white">
                                            <span class="badge bg-primary me-2">@(i + 1)</span>
                                            @question.QuestionText
                                        </h5>
                                        <div class="btn-group btn-group-sm">
                                            <button type="button" class="btn btn-outline-warning mark-review-btn" data-question="@i">
                                                <i class="bi bi-flag"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-info scroll-top-btn">
                                                <i class="bi bi-arrow-up"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <div class="options-list">
                                        @if (question.Options != null && question.Options.Count > 0)
                                        {
                                            for (int j = 0; j < question.Options.Count; j++)
                                            {
                                                var option = question.Options[j];
                                                <!-- FIXED: Better clickable area -->
                                                <div class="option-item-wrapper">
                                                    <input class="form-check-input visually-hidden"
                                                           type="radio"
                                                           name="q_@question.QuestionId"
                                                           value="@option.OptionId"
                                                           id="option_@question.QuestionId@j"
                                                           data-question="@question.QuestionId"
                                                           data-question-index="@i" />
                                                    <label class="option-item d-block p-3 rounded border border-secondary bg-dark text-light option-label"
                                                           for="option_@question.QuestionId@j">
                                                        <div class="d-flex align-items-center">
                                                            <span class="option-letter me-3">@((char)(65 + j))</span>
                                                            <span class="option-text flex-grow-1">@option.OptionText</span>
                                                            <div class="option-checkmark ms-2">
                                                                <i class="bi bi-circle text-muted"></i>
                                                                <i class="bi bi-check-circle-fill text-success d-none"></i>
                                                            </div>
                                                        </div>
                                                    </label>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <p class="text-muted">No options available for this question.</p>
                                        }
                                    </div>

                                    <!-- Question Footer -->
                                    <div class="question-footer mt-3 pt-3 border-top border-secondary">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">
                                                <i class="bi bi-clock me-1"></i>
                                                <span class="question-time" data-question="@i">Not started</span>
                                            </small>
                                            <div>
                                                <small class="text-muted me-2" id="selection-status-@i">No selection</small>
                                                <span class="badge bg-secondary review-badge" id="review-@i" style="display: none;">
                                                    <i class="bi bi-flag me-1"></i>Review
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            <!-- Submit Section -->
                            <div class="submit-section mt-5 p-4 border border-secondary rounded bg-dark">
                                <div class="row align-items-center">
                                    <div class="col-md-8">
                                        <h6 class="text-light mb-2">Ready to Submit?</h6>
                                        <p class="text-muted mb-0" id="submitStatus">
                                            Complete all questions to enable submission
                                        </p>
                                    </div>
                                    <div class="col-md-4 text-md-end">
                                        <button type="submit" class="btn btn-success btn-lg w-100" id="submitBtn" disabled>
                                            <i class="bi bi-send-check me-2"></i>
                                            <span class="submit-text">Submit Quiz</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-question-circle fs-1 text-muted d-block mb-3"></i>
                            <h5 class="text-light">No Questions Available</h5>
                            <p class="text-muted">This quiz doesn't have any questions yet.</p>
                            <a href="@Url.Action("Index")" class="btn btn-outline-primary">
                                <i class="bi bi-arrow-left me-2"></i>Back to Quizzes
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #1a1a1a;
        color: #ffffff;
    }

    .question-card {
        background-color: #2d3748 !important;
        border-color: #4a5568 !important;
        transition: all 0.3s ease;
        position: relative;
    }

        .question-card:hover {
            border-color: #63b3ed !important;
            transform: translateY(-2px);
        }

        .question-card.answered {
            border-left: 4px solid #48bb78;
        }

        .question-card.marked-review {
            border-left: 4px solid #ed8936;
        }

        .question-card.current {
            border-color: #63b3ed !important;
            box-shadow: 0 0 0 2px rgba(99, 179, 237, 0.5);
        }

    /* FIXED: Better option styling */
    .option-item-wrapper {
        margin-bottom: 12px;
        position: relative;
    }

    .option-item {
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid #4a5568 !important;
        background-color: #2d3748 !important;
    }

        .option-item:hover {
            border-color: #63b3ed !important;
            background-color: rgba(99, 179, 237, 0.1) !important;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        .option-item.selected {
            border-color: #48bb78 !important;
            background-color: rgba(72, 187, 120, 0.15) !important;
            transform: translateY(-1px);
        }

    /* Hide the actual radio button but keep it functional */
    .option-item-wrapper input[type="radio"]:checked + .option-item {
        border-color: #48bb78 !important;
        background-color: rgba(72, 187, 120, 0.15) !important;
    }

        .option-item-wrapper input[type="radio"]:checked + .option-item .option-checkmark .bi-circle {
            display: none;
        }

        .option-item-wrapper input[type="radio"]:checked + .option-item .option-checkmark .bi-check-circle-fill {
            display: inline-block !important;
        }

    .option-label {
        cursor: pointer;
        transition: color 0.2s ease;
        margin: 0; /* Remove default margin */
    }

    .option-letter {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        background-color: #4a5568;
        border-radius: 6px;
        font-weight: bold;
        font-size: 0.9em;
        transition: all 0.3s ease;
    }

    .option-item.selected .option-letter {
        background-color: #48bb78;
        color: white;
    }

    .option-checkmark {
        font-size: 1.2em;
        transition: all 0.3s ease;
    }

    .visually-hidden {
        position: absolute !important;
        width: 1px !important;
        height: 1px !important;
        padding: 0 !important;
        margin: -1px !important;
        overflow: hidden !important;
        clip: rect(0, 0, 0, 0) !important;
        white-space: nowrap !important;
        border: 0 !important;
    }

    .list-group-item {
        border-color: #4a5568 !important;
        transition: all 0.2s ease;
    }

        .list-group-item:hover {
            background-color: #4a5568 !important;
            color: #e2e8f0 !important;
        }

        .list-group-item.active {
            background-color: #63b3ed !important;
            border-color: #63b3ed !important;
            color: #1a202c !important;
        }

        .list-group-item.answered .status-badge {
            background-color: #48bb78 !important;
        }

        .list-group-item.marked .status-badge {
            background-color: #ed8936 !important;
        }

    .bg-gradient {
        background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%) !important;
    }

    .progress {
        background-color: #4a5568;
    }

    .btn-success {
        background-color: #48bb78;
        border-color: #48bb78;
    }

        .btn-success:disabled {
            background-color: #2d3748;
            border-color: #4a5568;
            color: #a0aec0;
        }

        .btn-success:hover:not(:disabled) {
            background-color: #38a169;
            border-color: #38a169;
            transform: translateY(-1px);
        }

    .submit-section {
        transition: all 0.3s ease;
    }

        .submit-section.ready {
            border-color: #48bb78 !important;
            background-color: rgba(72, 187, 120, 0.05) !important;
        }

    /* Smooth scrolling */
    html {
        scroll-behavior: smooth;
    }

    /* Review mode styling */
    .review-mode .question-card:not(.marked-review) {
        opacity: 0.6;
        transform: scale(0.98);
    }

    .review-mode .question-card.marked-review {
        transform: scale(1.02);
        box-shadow: 0 4px 15px rgba(237, 137, 54, 0.3);
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Quiz state management
            const quizState = {
                totalQuestions: @Model.Count,
                answeredQuestions: new Set(),
                markedForReview: new Set(),
                questionTimes: new Array(@Model.Count).fill(0),
                startTime: Date.now(),
                timer: null,
                timeLimit: @(Model.Count * 60), // 1 minute per question in seconds
                timeRemaining: @(Model.Count * 60),
                reviewMode: false,
                selections: {} // Track selections by question ID
            };

            // DOM elements
            const elements = {
                submitBtn: document.getElementById('submitBtn'),
                progressBar: document.getElementById('progressBar'),
                progressText: document.getElementById('progressText'),
                progressPercentage: document.getElementById('progressPercentage'),
                answeredStat: document.getElementById('answeredStat'),
                remainingStat: document.getElementById('remainingStat'),
                timeStat: document.getElementById('timeStat'),
                timeRemaining: document.getElementById('timeRemaining'),
                submitStatus: document.getElementById('submitStatus'),
                questionNav: document.getElementById('questionNav'),
                quizForm: document.getElementById('quizForm'),
                reviewModeBtn: document.getElementById('reviewModeBtn'),
                markAllBtn: document.getElementById('markAllBtn'),
                clearAllBtn: document.getElementById('clearAllBtn')
            };

            // Initialize quiz
            function initQuiz() {
                startTimer();
                setupEventListeners();
                loadSavedProgress();
                updateDisplay();
            }

            // Timer functionality
            function startTimer() {
                quizState.timer = setInterval(() => {
                    quizState.timeRemaining--;

                    if (quizState.timeRemaining <= 0) {
                        endQuizTimeUp();
                        return;
                    }

                    updateTimerDisplay();
                }, 1000);
            }

            function updateTimerDisplay() {
                const minutes = Math.floor(quizState.timeRemaining / 60);
                const seconds = quizState.timeRemaining % 60;
                const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

                elements.timeRemaining.textContent = timeString;
                elements.timeStat.textContent = timeString;

                // Color coding for time
                if (quizState.timeRemaining < 300) { // 5 minutes
                    elements.timeRemaining.className = 'text-danger fw-bold';
                } else if (quizState.timeRemaining < 600) { // 10 minutes
                    elements.timeRemaining.className = 'text-warning fw-bold';
                }
            }

            function endQuizTimeUp() {
                clearInterval(quizState.timer);
                alert('Time is up! Submitting your quiz automatically.');
                elements.quizForm.submit();
            }

            // Event listeners
            function setupEventListeners() {
                // FIXED: Use event delegation for better performance and reliability
                document.addEventListener('click', function(e) {
                    // Handle option selection when clicking anywhere on the option item
                    const optionItem = e.target.closest('.option-item');
                    if (optionItem) {
                        const radio = optionItem.previousElementSibling; // The hidden radio input
                        if (radio && radio.type === 'radio') {
                            radio.checked = true;
                            const questionIndex = parseInt(radio.getAttribute('data-question-index'));
                            const questionId = radio.getAttribute('data-question');
                            const optionId = radio.value;

                            // Trigger change event to update state
                            radio.dispatchEvent(new Event('change', { bubbles: true }));
                        }
                    }

                    // Handle mark for review buttons
                    if (e.target.closest('.mark-review-btn')) {
                        const btn = e.target.closest('.mark-review-btn');
                        const questionIndex = parseInt(btn.getAttribute('data-question'));
                        toggleMarkForReview(questionIndex);
                    }

                    // Handle scroll to top buttons
                    if (e.target.closest('.scroll-top-btn')) {
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    }

                    // Handle navigation clicks
                    if (e.target.closest('.question-nav-item')) {
                        e.preventDefault();
                        const navItem = e.target.closest('.question-nav-item');
                        const questionIndex = parseInt(navItem.getAttribute('data-question-index'));
                        scrollToQuestion(questionIndex);
                    }
                });

                // Radio button changes - backup for direct interaction
                document.querySelectorAll('input[type="radio"]').forEach(radio => {
                    radio.addEventListener('change', function() {
                        const questionIndex = parseInt(this.getAttribute('data-question-index'));
                        const questionId = this.getAttribute('data-question');
                        const optionId = this.value;

                        handleAnswer(questionIndex, questionId, optionId);
                    });
                });

                // Review mode toggle
                elements.reviewModeBtn.addEventListener('click', toggleReviewMode);

                // Mark all for review
                elements.markAllBtn.addEventListener('click', markAllForReview);

                // Clear all answers
                elements.clearAllBtn.addEventListener('click', clearAllAnswers);

                // Form submission
                elements.quizForm.addEventListener('submit', handleFormSubmit);

                // Auto-save progress
                setInterval(saveProgress, 30000); // Save every 30 seconds

                // Visibility change (auto-save when leaving)
                document.addEventListener('visibilitychange', function() {
                    if (document.hidden) {
                        saveProgress();
                    }
                });
            }

            // Answer handling
            function handleAnswer(questionIndex, questionId, optionId) {
                console.log(`Question ${questionIndex} (ID: ${questionId}) - Selected option: ${optionId}`);

                // Store the selection
                quizState.selections[questionId] = optionId;

                // Update answered questions
                quizState.answeredQuestions.add(questionIndex);

                // Update question time
                const currentTime = Math.floor((Date.now() - quizState.startTime) / 1000);
                quizState.questionTimes[questionIndex] = currentTime;

                // Update UI
                updateQuestionStatus(questionIndex, 'answered');
                updateOptionSelection(questionIndex, questionId, optionId);
                updateDisplay();

                // Auto-save
                saveProgress();
            }

            function toggleMarkForReview(questionIndex) {
                if (quizState.markedForReview.has(questionIndex)) {
                    quizState.markedForReview.delete(questionIndex);
                    document.getElementById(`review-${questionIndex}`).style.display = 'none';
                    document.querySelector(`.question-nav-item[data-question-index="${questionIndex}"]`).classList.remove('marked');
                } else {
                    quizState.markedForReview.add(questionIndex);
                    document.getElementById(`review-${questionIndex}`).style.display = 'inline-block';
                    document.querySelector(`.question-nav-item[data-question-index="${questionIndex}"]`).classList.add('marked');
                }

                updateQuestionCard(questionIndex);
                saveProgress();
            }

            function toggleReviewMode() {
                quizState.reviewMode = !quizState.reviewMode;
                document.body.classList.toggle('review-mode', quizState.reviewMode);

                if (quizState.reviewMode) {
                    elements.reviewModeBtn.innerHTML = '<i class="bi bi-eye-slash me-1"></i>Exit Review';
                    elements.reviewModeBtn.classList.remove('btn-outline-warning');
                    elements.reviewModeBtn.classList.add('btn-warning');
                } else {
                    elements.reviewModeBtn.innerHTML = '<i class="bi bi-eye me-1"></i>Review Mode';
                    elements.reviewModeBtn.classList.remove('btn-warning');
                    elements.reviewModeBtn.classList.add('btn-outline-warning');
                }
            }

            function markAllForReview() {
                for (let i = 0; i < quizState.totalQuestions; i++) {
                    if (!quizState.markedForReview.has(i)) {
                        toggleMarkForReview(i);
                    }
                }
            }

            function clearAllAnswers() {
                if (confirm('Are you sure you want to clear all answers? This cannot be undone.')) {
                    // Clear all radio buttons
                    document.querySelectorAll('input[type="radio"]').forEach(radio => {
                        radio.checked = false;
                    });

                    // Reset state
                    quizState.answeredQuestions.clear();
                    quizState.selections = {};

                    // Reset UI
                    for (let i = 0; i < quizState.totalQuestions; i++) {
                        updateQuestionStatus(i, 'unanswered');
                        document.getElementById(`selection-status-${i}`).textContent = 'No selection';

                        // Remove selected class from all options
                        const questionCard = document.getElementById(`question-${i + 1}`);
                        if (questionCard) {
                            questionCard.querySelectorAll('.option-item').forEach(item => {
                                item.classList.remove('selected');
                            });
                        }
                    }

                    updateDisplay();
                    saveProgress();
                }
            }

            // UI updates
            function updateDisplay() {
                const answeredCount = quizState.answeredQuestions.size;
                const percentage = (answeredCount / quizState.totalQuestions) * 100;

                // Progress bar
                elements.progressBar.style.width = `${percentage}%`;
                elements.progressText.textContent = `${answeredCount}/${quizState.totalQuestions}`;
                elements.progressPercentage.textContent = `${Math.round(percentage)}%`;

                // Stats
                elements.answeredStat.textContent = answeredCount;
                elements.remainingStat.textContent = quizState.totalQuestions - answeredCount;

                // Submit button
                const allAnswered = answeredCount === quizState.totalQuestions;
                elements.submitBtn.disabled = !allAnswered;

                if (allAnswered) {
                    elements.submitStatus.textContent = 'All questions answered! Ready to submit.';
                    elements.submitStatus.className = 'text-success mb-0';
                    document.querySelector('.submit-section').classList.add('ready');
                } else {
                    elements.submitStatus.textContent = `${quizState.totalQuestions - answeredCount} questions remaining`;
                    elements.submitStatus.className = 'text-warning mb-0';
                    document.querySelector('.submit-section').classList.remove('ready');
                }

                // Progress bar color
                if (percentage === 100) {
                    elements.progressBar.className = 'progress-bar bg-success';
                } else if (percentage >= 50) {
                    elements.progressBar.className = 'progress-bar bg-warning';
                } else {
                    elements.progressBar.className = 'progress-bar bg-info';
                }
            }

            function updateQuestionStatus(questionIndex, status) {
                const navItem = document.querySelector(`.question-nav-item[data-question-index="${questionIndex}"]`);
                const statusBadge = document.getElementById(`status-${questionIndex}`);
                const questionCard = document.getElementById(`question-${questionIndex + 1}`);

                navItem.classList.remove('answered', 'marked');
                questionCard.classList.remove('answered', 'marked-review');

                if (status === 'answered') {
                    navItem.classList.add('answered');
                    questionCard.classList.add('answered');
                    statusBadge.textContent = '✓';
                    statusBadge.className = 'badge bg-success status-badge';
                } else if (quizState.markedForReview.has(questionIndex)) {
                    navItem.classList.add('marked');
                    questionCard.classList.add('marked-review');
                    statusBadge.textContent = '!';
                    statusBadge.className = 'badge bg-warning status-badge';
                } else {
                    navItem.classList.add('unanswered');
                    questionCard.classList.add('unanswered');
                    statusBadge.textContent = '○';
                    statusBadge.className = 'badge bg-secondary status-badge';
                }
            }

            // FIXED: Improved option selection highlighting
            function updateOptionSelection(questionIndex, questionId, optionId) {
                console.log(`Updating selection for question ${questionIndex}: option ${optionId}`);

                // Update selection status text
                document.getElementById(`selection-status-${questionIndex}`).textContent = 'Selected';

                // Get the question card
                const questionCard = document.getElementById(`question-${questionIndex + 1}`);
                if (!questionCard) {
                    console.error(`Question card not found for index ${questionIndex}`);
                    return;
                }

                // Remove selected class from all options in this question
                questionCard.querySelectorAll('.option-item').forEach(item => {
                    item.classList.remove('selected');
                });

                // Add selected class to the chosen option
                const selectedRadio = questionCard.querySelector(`input[value="${optionId}"]`);
                if (selectedRadio) {
                    const selectedOption = selectedRadio.nextElementSibling; // The label element
                    if (selectedOption && selectedOption.classList.contains('option-item')) {
                        selectedOption.classList.add('selected');
                        console.log(`Successfully highlighted option ${optionId}`);
                    } else {
                        console.error(`Option item not found for option ${optionId}`);
                    }
                } else {
                    console.error(`Radio button not found for option ${optionId}`);
                }
            }

            function updateQuestionCard(questionIndex) {
                const questionCard = document.getElementById(`question-${questionIndex + 1}`);
                if (questionCard) {
                    questionCard.classList.toggle('marked-review', quizState.markedForReview.has(questionIndex));
                }
            }

            function scrollToQuestion(questionIndex) {
                const questionElement = document.getElementById(`question-${questionIndex + 1}`);
                if (questionElement) {
                    questionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });

                    // Highlight current question
                    document.querySelectorAll('.question-card').forEach(card => {
                        card.classList.remove('current');
                    });
                    questionElement.classList.add('current');

                    setTimeout(() => {
                        questionElement.classList.remove('current');
                    }, 2000);
                }
            }

            // Progress persistence
            function saveProgress() {
                const progress = {
                    answered: Array.from(quizState.answeredQuestions),
                    marked: Array.from(quizState.markedForReview),
                    times: quizState.questionTimes,
                    startTime: quizState.startTime,
                    timeRemaining: quizState.timeRemaining,
                    selections: quizState.selections
                };

                localStorage.setItem(`quizProgress_@ViewBag.QuizId`, JSON.stringify(progress));
                console.log('Progress saved:', progress);
            }

            function loadSavedProgress() {
                const saved = localStorage.getItem(`quizProgress_@ViewBag.QuizId`);
                if (saved) {
                    const progress = JSON.parse(saved);

                    if (confirm('Found saved progress. Would you like to continue where you left off?')) {
                        // Restore answered questions
                        progress.answered.forEach(index => {
                            quizState.answeredQuestions.add(index);
                        });

                        // Restore marked questions
                        progress.marked.forEach(index => {
                            quizState.markedForReview.add(index);
                        });

                        // Restore times
                        quizState.questionTimes = progress.times;
                        quizState.startTime = progress.startTime;
                        quizState.timeRemaining = progress.timeRemaining;

                        // Restore selections
                        quizState.selections = progress.selections || {};

                        // Restore radio button states and UI
                        restoreSelections(progress.selections);

                        console.log('Progress loaded:', progress);
                    } else {
                        localStorage.removeItem(`quizProgress_@ViewBag.QuizId`);
                    }
                }
            }

            function restoreSelections(selections) {
                if (!selections) return;

                for (const [questionId, optionId] of Object.entries(selections)) {
                    const radio = document.querySelector(`input[name="q_${questionId}"][value="${optionId}"]`);
                    if (radio) {
                        radio.checked = true;
                        const questionIndex = parseInt(radio.getAttribute('data-question-index'));

                        // Update UI for this selection
                        updateQuestionStatus(questionIndex, 'answered');
                        updateOptionSelection(questionIndex, questionId, optionId);
                    }
                }
                updateDisplay();
            }

            // Form submission
            function handleFormSubmit(e) {
                const answeredCount = quizState.answeredQuestions.size;

                if (answeredCount < quizState.totalQuestions) {
                    e.preventDefault();
                    alert(`Please answer all ${quizState.totalQuestions - answeredCount} remaining questions before submitting.`);
                    return false;
                }

                // Show loading state
                elements.submitBtn.disabled = true;
                elements.submitBtn.querySelector('.submit-text').textContent = 'Submitting...';

                // Clear saved progress
                localStorage.removeItem(`quizProgress_@ViewBag.QuizId`);

                // Add time spent data
                const totalTime = Math.floor((Date.now() - quizState.startTime) / 1000);
                const timeInput = document.createElement('input');
                timeInput.type = 'hidden';
                timeInput.name = 'totalTime';
                timeInput.value = totalTime;
                elements.quizForm.appendChild(timeInput);

                console.log('Submitting quiz with selections:', quizState.selections);
                return true;
            }

            // Initialize the quiz
            initQuiz();
        });
    </script>
}