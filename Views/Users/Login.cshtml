@{
    ViewBag.Title = "Login - Quiz Application";
}

<div class="container-fluid vh-100 bg-light">
    <div class="row h-100 justify-content-center align-items-center">
        <div class="col-md-5 col-lg-4">
            <!-- Login Card -->
            <div class="card shadow-lg border-0 rounded-4 overflow-hidden">
                <!-- Card Header with Soothing Blue -->
                <div class="card-header py-4 text-white text-center" style="background: linear-gradient(135deg, #4f86f7 0%, #3366cc 100%);">
                    <div class="mb-3">
                        <i class="bi bi-person-badge display-4 d-block"></i>
                    </div>
                    <h2 class="h3 mb-1 fw-bold">Welcome Back</h2>
                    <p class="mb-0 opacity-90">Sign in to your account</p>
                </div>

                <!-- Card Body -->
                <div class="card-body p-4 bg-white">
                    <!-- DUAL APPROACH: Keep existing form BUT add AJAX handling -->
                    @using (Html.BeginForm("Login", "Users", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", id = "loginForm" }))
                    {
                        @Html.AntiForgeryToken()

                        <!-- Username Field -->
                        <div class="mb-4">
                            <label for="username" class="form-label fw-semibold text-dark">Username</label>
                            <div class="input-group">
                                <span class="input-group-text bg-light border-end-0">
                                    <i class="bi bi-person text-muted"></i>
                                </span>
                                <input type="text"
                                       class="form-control border-start-0 ps-0"
                                       id="username"
                                       name="username"
                                       placeholder="Enter your username"
                                       required
                                       autocomplete="username">
                            </div>
                            <div class="invalid-feedback">
                                Please enter your username.
                            </div>
                        </div>

                        <!-- Password Field -->
                        <div class="mb-4">
                            <label for="password" class="form-label fw-semibold text-dark">Password</label>
                            <div class="input-group">
                                <span class="input-group-text bg-light border-end-0">
                                    <i class="bi bi-lock text-muted"></i>
                                </span>
                                <input type="password"
                                       class="form-control border-start-0 ps-0"
                                       id="password"
                                       name="password"
                                       placeholder="Enter your password"
                                       required
                                       autocomplete="current-password">
                                <button type="button" class="btn btn-outline-secondary border-start-0" onclick="togglePassword()">
                                    <i class="bi bi-eye" id="passwordToggleIcon"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback">
                                Please enter your password.
                            </div>
                        </div>

                        <!-- Remember Me & Forgot Password -->
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="rememberMe">
                                <label class="form-check-label small text-muted" for="rememberMe">
                                    Remember me
                                </label>
                            </div>
                            <a href="#" class="small text-decoration-none" style="color: #4f86f7; font-weight: 500;">
                                Forgot password?
                            </a>
                        </div>

                        <!-- Submit Button - NOW WITH JWT SUPPORT -->
                        <button type="submit" class="btn btn-primary btn-lg w-100 py-2 fw-semibold shadow-sm"
                                style="background: linear-gradient(135deg, #4f86f7 0%, #3366cc 100%); border: none;"
                                onclick="handleLogin(event)">
                            <i class="bi bi-box-arrow-in-right me-2"></i>Sign In
                        </button>
                    }

                    <!-- Error Message -->
                    @if (ViewBag.Message != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show mt-4 border-0 shadow-sm" role="alert">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-exclamation-triangle-fill me-2 fs-5"></i>
                                <div class="flex-grow-1">
                                    <strong>Login Failed</strong>
                                    <div class="small">@ViewBag.Message</div>
                                </div>
                            </div>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <!-- Divider -->
                    <div class="text-center mt-4 mb-3">
                        <hr class="text-muted">
                        <span class="px-3 small text-muted bg-white">New to platform?</span>
                    </div>

                    <!-- Register Link -->
                    <div class="text-center">
                        <a href="@Url.Action("Register", "Users")" class="btn btn-outline-primary w-100" style="border-color: #4f86f7; color: #4f86f7;">
                            <i class="bi bi-person-plus me-2"></i>Create New Account
                        </a>
                    </div>
                </div>

                <!-- Card Footer -->
                <div class="card-footer py-3 text-center bg-light border-0">
                    <small class="text-muted">
                        &copy; @DateTime.Now.Year Quiz Application. Secure login.
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Password Toggle Script -->
<script>
    function togglePassword() {
        const passwordInput = document.getElementById('password');
        const passwordIcon = document.getElementById('passwordToggleIcon');

        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            passwordIcon.classList.remove('bi-eye');
            passwordIcon.classList.add('bi-eye-slash');
        } else {
            passwordInput.type = 'password';
            passwordIcon.classList.remove('bi-eye-slash');
            passwordIcon.classList.add('bi-eye');
        }
    }

    // Form validation
    (function () {
        'use strict'
        const forms = document.querySelectorAll('.needs-validation')
        Array.from(forms).forEach(function (form) {
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }
                form.classList.add('was-validated')
            }, false)
        })
    })()
    // JWT Login Handler - FIXED VERSION
    async function handleLogin(event) {
        event.preventDefault();
        event.stopPropagation(); // PREVENT FORM SUBMISSION

        const form = document.getElementById('loginForm');
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;

        // Basic validation
        if (!username || !password) {
            form.classList.add('was-validated');
            return;
        }

        try {
            // Show loading state
            const submitBtn = event.target;
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="bi bi-arrow-repeat spinner"></i> Signing In...';
            submitBtn.disabled = true;

            // Try JWT login first
            const response = await fetch('/Users/LoginJwt', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestType': 'JWT'
                },
                body: JSON.stringify({ username, password })
            });

            // CHECK FOR HTTP ERRORS
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
                // ✅ JWT SUCCESS
                localStorage.setItem('jwtToken', result.token);
                localStorage.setItem('user', JSON.stringify(result.user));

                showMessage('Login successful! Redirecting...', 'success');

                // Redirect after short delay
                setTimeout(() => {
                    window.location.href = result.redirectUrl;
                }, 1000);

            } else {
                // ❌ JWT FAILED
                showMessage(result.message || 'Login failed', 'error');

                // Re-enable button
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }

        } catch (error) {
            console.error('Login error:', error);

            // BETTER ERROR MESSAGES
            let errorMessage = 'Network error. Please try again.';
            if (error.message.includes('HTTP error! status: 404')) {
                errorMessage = 'Login endpoint not found. Please contact administrator.';
            } else if (error.message.includes('HTTP error! status: 500')) {
                errorMessage = 'Server error. Please try again later.';
            }

            showMessage(errorMessage, 'error');

            // Re-enable button
            const submitBtn = event.target;
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    }

    // Helper function to show messages
    function showMessage(message, type) {
        // Remove existing messages
        const existingAlert = document.querySelector('.alert-dismissible');
        if (existingAlert) {
            existingAlert.remove();
        }

        const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
        const icon = type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill';

        const alertHtml = `
        <div class="alert ${alertClass} alert-dismissible fade show mt-4 border-0 shadow-sm" role="alert">
            <div class="d-flex align-items-center">
                <i class="bi ${icon} me-2 fs-5"></i>
                <div class="flex-grow-1">
                    <strong>${type === 'success' ? 'Success' : 'Error'}</strong>
                    <div class="small">${message}</div>
                </div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `;

        const form = document.getElementById('loginForm');
        form.insertAdjacentHTML('afterend', alertHtml);
    }

    // ADD CSS ONLY ONCE - MOVED TO STYLE SECTION BELOW
</script>

<style>
    .card {
        border: 1px solid rgba(0, 0, 0, 0.1);
    }

    .input-group-text {
        transition: all 0.3s ease;
    }

    .form-control:focus {
        box-shadow: 0 0 0 0.2rem rgba(79, 134, 247, 0.25);
        border-color: #4f86f7;
    }

    .btn-primary {
        background: linear-gradient(135deg, #4f86f7 0%, #3366cc 100%);
        border: none;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(79, 134, 247, 0.3);
            background: linear-gradient(135deg, #5a8ef8 0%, #3a70d4 100%);
        }

    .btn-outline-primary:hover {
        background: linear-gradient(135deg, #4f86f7 0%, #3366cc 100%);
        color: white;
        border-color: #4f86f7;
    }

    .alert {
        border-left: 4px solid #dc3545;
        background: rgba(220, 53, 69, 0.05);
    }

    body {
        background-color: #f8f9fa;
    }

    /* 🆕 ADD SPINNER CSS HERE INSTEAD */
    .spinner {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }
</style>